#!/usr/bin/env python3
"""
Comprehensive test script for malware detection applications.
Tests both ML-based and VirusTotal-based detection systems.
"""

import os
import sys
import time
import requests
import subprocess
import tempfile
import shutil
from pathlib import Path

# Add the project directories to Python path
sys.path.append('/workspace/ML_based_detectionn')
sys.path.append('/workspace/Virus_total_based')

def test_imports():
    """Test if all required modules can be imported."""
    print("Testing imports...")
    
    try:
        import flask
        print("âœ“ Flask imported successfully")
    except ImportError as e:
        print(f"âœ— Flask import failed: {e}")
        return False
    
    try:
        import joblib
        print("âœ“ Joblib imported successfully")
    except ImportError as e:
        print(f"âœ— Joblib import failed: {e}")
        return False
    
    try:
        import pefile
        print("âœ“ Pefile imported successfully")
    except ImportError as e:
        print(f"âœ— Pefile import failed: {e}")
        return False
    
    try:
        import pandas
        print("âœ“ Pandas imported successfully")
    except ImportError as e:
        print(f"âœ— Pandas import failed: {e}")
        return False
    
    try:
        import sklearn
        print("âœ“ Scikit-learn imported successfully")
    except ImportError as e:
        print(f"âœ— Scikit-learn import failed: {e}")
        return False
    
    return True

def test_feature_extraction():
    """Test the feature extraction module."""
    print("\nTesting feature extraction...")
    
    try:
        from feature_extraction import extract_features, calculate_entropy
        print("âœ“ Feature extraction module imported successfully")
        
        # Test entropy calculation
        test_data = b"Hello, World!"
        entropy = calculate_entropy(test_data)
        print(f"âœ“ Entropy calculation works: {entropy:.4f}")
        
        # Test with empty data
        empty_entropy = calculate_entropy(b"")
        print(f"âœ“ Empty data entropy: {empty_entropy}")
        
        return True
    except Exception as e:
        print(f"âœ— Feature extraction test failed: {e}")
        return False

def create_test_exe():
    """Create a simple test executable file."""
    print("\nCreating test executable...")
    
    # Create a simple test file that looks like an executable
    test_exe_path = "/workspace/test_file.exe"
    
    # Create a minimal PE-like structure (simplified)
    test_data = b"MZ" + b"\x00" * 58  # DOS header
    test_data += b"PE\x00\x00"  # PE signature
    test_data += b"\x00" * 1000  # Some additional data
    
    with open(test_exe_path, "wb") as f:
        f.write(test_data)
    
    print(f"âœ“ Test executable created: {test_exe_path}")
    return test_exe_path

def test_ml_detection():
    """Test the ML-based detection system."""
    print("\nTesting ML-based detection...")
    
    try:
        # Change to ML detection directory
        os.chdir('/workspace/ML_based_detectionn')
        
        # Test if the app can be imported
        from app import app, model, allowed_file
        print("âœ“ ML detection app imported successfully")
        
        # Test model
        if model is not None:
            print("âœ“ Model loaded successfully")
        else:
            print("âœ— Model is None")
            return False
        
        # Test allowed_file function
        assert allowed_file("test.exe") == True
        assert allowed_file("test.dll") == True
        assert allowed_file("test.bin") == True
        assert allowed_file("test.txt") == False
        print("âœ“ File validation works correctly")
        
        # Test feature extraction with test file
        test_file = create_test_exe()
        try:
            from feature_extraction import extract_features
            features = extract_features(test_file)
            print(f"âœ“ Feature extraction works: {features.shape}")
        except Exception as e:
            print(f"âš  Feature extraction failed (expected for non-PE file): {e}")
        
        # Clean up test file
        if os.path.exists(test_file):
            os.remove(test_file)
        
        return True
    except Exception as e:
        print(f"âœ— ML detection test failed: {e}")
        return False

def test_virustotal_detection():
    """Test the VirusTotal-based detection system."""
    print("\nTesting VirusTotal-based detection...")
    
    try:
        # Change to VirusTotal detection directory
        os.chdir('/workspace/Virus_total_based')
        
        # Test if the app can be imported
        from app import app
        print("âœ“ VirusTotal detection app imported successfully")
        
        # Test environment variable handling
        api_key = os.environ.get('VIRUSTOTAL_API_KEY')
        if api_key:
            print("âœ“ VirusTotal API key found")
        else:
            print("âš  VirusTotal API key not set (this is expected for testing)")
        
        return True
    except Exception as e:
        print(f"âœ— VirusTotal detection test failed: {e}")
        return False

def test_flask_apps():
    """Test if Flask apps can start without errors."""
    print("\nTesting Flask applications...")
    
    # Test ML detection app
    try:
        os.chdir('/workspace/ML_based_detectionn')
        from app import app as ml_app
        
        # Test app configuration
        assert ml_app.config['MAX_CONTENT_LENGTH'] == 10 * 1024 * 1024
        print("âœ“ ML app configuration is correct")
        
        # Test routes
        with ml_app.test_client() as client:
            response = client.get('/')
            assert response.status_code == 200
            print("âœ“ ML app index route works")
            
    except Exception as e:
        print(f"âœ— ML Flask app test failed: {e}")
        return False
    
    # Test VirusTotal detection app
    try:
        os.chdir('/workspace/Virus_total_based')
        from app import app as vt_app
        
        # Test app configuration
        assert vt_app.secret_key is not None
        print("âœ“ VirusTotal app configuration is correct")
        
        # Test routes
        with vt_app.test_client() as client:
            response = client.get('/')
            assert response.status_code == 200
            print("âœ“ VirusTotal app index route works")
            
    except Exception as e:
        print(f"âœ— VirusTotal Flask app test failed: {e}")
        return False
    
    return True

def test_file_operations():
    """Test file operations and permissions."""
    print("\nTesting file operations...")
    
    try:
        # Test upload directory creation
        upload_dir = "/workspace/ML_based_detectionn/uploads"
        os.makedirs(upload_dir, exist_ok=True)
        assert os.path.exists(upload_dir)
        print("âœ“ Upload directory exists")
        
        # Test file writing
        test_file = os.path.join(upload_dir, "test.txt")
        with open(test_file, "w") as f:
            f.write("test content")
        assert os.path.exists(test_file)
        print("âœ“ File writing works")
        
        # Clean up
        os.remove(test_file)
        print("âœ“ File cleanup works")
        
        return True
    except Exception as e:
        print(f"âœ— File operations test failed: {e}")
        return False

def run_integration_test():
    """Run a basic integration test."""
    print("\nRunning integration test...")
    
    try:
        # Start ML detection app in background
        os.chdir('/workspace/ML_based_detectionn')
        ml_process = subprocess.Popen([
            sys.executable, 'app.py'
        ], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        
        # Wait for app to start
        time.sleep(3)
        
        # Test if app is running
        try:
            response = requests.get('http://127.0.0.1:5000', timeout=5)
            if response.status_code == 200:
                print("âœ“ ML detection app is running and responding")
            else:
                print(f"âš  ML detection app responded with status {response.status_code}")
        except requests.exceptions.RequestException as e:
            print(f"âš  Could not connect to ML detection app: {e}")
        
        # Clean up
        ml_process.terminate()
        ml_process.wait()
        print("âœ“ ML detection app stopped cleanly")
        
        return True
    except Exception as e:
        print(f"âœ— Integration test failed: {e}")
        return False

def main():
    """Run all tests."""
    print("=" * 60)
    print("MALWARE DETECTION SYSTEM TEST SUITE")
    print("=" * 60)
    
    tests = [
        ("Import Test", test_imports),
        ("Feature Extraction Test", test_feature_extraction),
        ("ML Detection Test", test_ml_detection),
        ("VirusTotal Detection Test", test_virustotal_detection),
        ("Flask Apps Test", test_flask_apps),
        ("File Operations Test", test_file_operations),
        ("Integration Test", run_integration_test)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\n{'='*20} {test_name} {'='*20}")
        try:
            if test_func():
                passed += 1
                print(f"âœ“ {test_name} PASSED")
            else:
                print(f"âœ— {test_name} FAILED")
        except Exception as e:
            print(f"âœ— {test_name} FAILED with exception: {e}")
    
    print("\n" + "=" * 60)
    print(f"TEST RESULTS: {passed}/{total} tests passed")
    print("=" * 60)
    
    if passed == total:
        print("ðŸŽ‰ ALL TESTS PASSED! The system is ready to use.")
        return 0
    else:
        print("âš  Some tests failed. Please check the output above.")
        return 1

if __name__ == "__main__":
    sys.exit(main())