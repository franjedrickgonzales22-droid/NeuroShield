#!/usr/bin/env python3
"""
Demo script to test malware detection functionality with real files.
"""

import os
import sys
import time
import requests
import subprocess
import tempfile
from pathlib import Path

def create_test_files():
    """Create various test files for demonstration."""
    print("Creating test files...")
    
    test_files = []
    
    # Create a simple text file (should be rejected)
    text_file = "/workspace/test_text.txt"
    with open(text_file, "w") as f:
        f.write("This is just a text file for testing.")
    test_files.append(("text file", text_file, False))
    
    # Create a fake executable file
    exe_file = "/workspace/test_fake.exe"
    with open(exe_file, "wb") as f:
        # Create a minimal PE-like structure
        exe_data = b"MZ" + b"\x00" * 58  # DOS header
        exe_data += b"PE\x00\x00"  # PE signature
        exe_data += b"\x00" * 1000  # Additional data
        f.write(exe_data)
    test_files.append(("fake executable", exe_file, True))
    
    # Create a DLL file
    dll_file = "/workspace/test_fake.dll"
    with open(dll_file, "wb") as f:
        # Create a minimal PE-like structure for DLL
        dll_data = b"MZ" + b"\x00" * 58  # DOS header
        dll_data += b"PE\x00\x00"  # PE signature
        dll_data += b"\x00" * 1000  # Additional data
        f.write(dll_data)
    test_files.append(("fake DLL", dll_file, True))
    
    return test_files

def test_ml_detection_api():
    """Test the ML detection API directly."""
    print("\n" + "="*50)
    print("TESTING ML DETECTION API")
    print("="*50)
    
    try:
        # Import the ML detection components
        sys.path.append('/workspace/ML_based_detectionn')
        from app import app, model, allowed_file
        from feature_extraction import extract_features
        
        print(f"âœ“ Model loaded: {type(model).__name__}")
        print(f"âœ“ Model features: {model.n_features_in_ if hasattr(model, 'n_features_in_') else 'Unknown'}")
        
        # Test file validation
        print("\nTesting file validation:")
        test_cases = [
            ("test.exe", True),
            ("test.dll", True),
            ("test.bin", True),
            ("test.txt", False),
            ("test.pdf", False)
        ]
        
        for filename, expected in test_cases:
            result = allowed_file(filename)
            status = "âœ“" if result == expected else "âœ—"
            print(f"  {status} {filename}: {result} (expected: {expected})")
        
        # Test with actual files
        test_files = create_test_files()
        
        print("\nTesting file analysis:")
        for file_type, file_path, should_analyze in test_files:
            print(f"\n  Testing {file_type}: {file_path}")
            
            if should_analyze:
                try:
                    # Extract features
                    features = extract_features(file_path)
                    print(f"    âœ“ Features extracted: {features.shape}")
                    
                    # Make prediction
                    prediction = model.predict(features)
                    confidence = model.predict_proba(features)[0].max() if hasattr(model, 'predict_proba') else 0.5
                    
                    result = "Malware" if prediction[0] == 1 else "Safe"
                    print(f"    âœ“ Prediction: {result} (confidence: {confidence:.2%})")
                    
                except Exception as e:
                    print(f"    âš  Analysis failed: {e}")
            else:
                print(f"    âš  File type not supported for analysis")
        
        return True
        
    except Exception as e:
        print(f"âœ— ML detection test failed: {e}")
        return False

def test_flask_app():
    """Test the Flask application."""
    print("\n" + "="*50)
    print("TESTING FLASK APPLICATION")
    print("="*50)
    
    try:
        # Start the Flask app
        os.chdir('/workspace/ML_based_detectionn')
        process = subprocess.Popen([
            sys.executable, 'app.py'
        ], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        
        # Wait for app to start
        time.sleep(3)
        
        # Test the web interface
        try:
            response = requests.get('http://127.0.0.1:5000', timeout=10)
            if response.status_code == 200:
                print("âœ“ Web interface is accessible")
                print(f"  Response length: {len(response.text)} characters")
            else:
                print(f"âœ— Web interface returned status {response.status_code}")
                return False
        except requests.exceptions.RequestException as e:
            print(f"âœ— Could not access web interface: {e}")
            return False
        
        # Test file upload
        test_files = create_test_files()
        for file_type, file_path, should_analyze in test_files:
            print(f"\n  Testing upload of {file_type}...")
            
            try:
                with open(file_path, 'rb') as f:
                    files = {'file': (os.path.basename(file_path), f, 'application/octet-stream')}
                    response = requests.post('http://127.0.0.1:5000/analyze', files=files, timeout=30)
                
                if response.status_code == 200:
                    print(f"    âœ“ Upload successful for {file_type}")
                    if should_analyze:
                        print(f"    âœ“ Analysis completed for {file_type}")
                    else:
                        print(f"    âœ“ File rejected as expected for {file_type}")
                else:
                    print(f"    âš  Upload returned status {response.status_code} for {file_type}")
                    
            except Exception as e:
                print(f"    âœ— Upload failed for {file_type}: {e}")
        
        # Clean up
        process.terminate()
        process.wait()
        print("\nâœ“ Flask application stopped cleanly")
        
        return True
        
    except Exception as e:
        print(f"âœ— Flask app test failed: {e}")
        return False

def cleanup_test_files():
    """Clean up test files."""
    print("\nCleaning up test files...")
    
    test_files = [
        "/workspace/test_text.txt",
        "/workspace/test_fake.exe",
        "/workspace/test_fake.dll"
    ]
    
    for file_path in test_files:
        if os.path.exists(file_path):
            os.remove(file_path)
            print(f"  âœ“ Removed {file_path}")

def main():
    """Run the demo."""
    print("="*60)
    print("MALWARE DETECTION SYSTEM DEMO")
    print("="*60)
    
    try:
        # Test ML detection API
        ml_success = test_ml_detection_api()
        
        # Test Flask application
        flask_success = test_flask_app()
        
        # Clean up
        cleanup_test_files()
        
        # Summary
        print("\n" + "="*60)
        print("DEMO SUMMARY")
        print("="*60)
        
        if ml_success:
            print("âœ“ ML Detection API: Working correctly")
        else:
            print("âœ— ML Detection API: Issues detected")
        
        if flask_success:
            print("âœ“ Flask Application: Working correctly")
        else:
            print("âœ— Flask Application: Issues detected")
        
        if ml_success and flask_success:
            print("\nðŸŽ‰ DEMO COMPLETED SUCCESSFULLY!")
            print("The malware detection system is working properly.")
            return 0
        else:
            print("\nâš  DEMO COMPLETED WITH ISSUES")
            print("Some components may need attention.")
            return 1
            
    except Exception as e:
        print(f"\nâœ— Demo failed with error: {e}")
        return 1

if __name__ == "__main__":
    sys.exit(main())